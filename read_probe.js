const ModbusRTU = require("modbus-serial");
const client = new ModbusRTU();
const axios = require('axios');

const port = process.platform === "win32" ? "COM12" : "/dev/ttyUSB0";
const baudRate = 9600;

// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ slave IDs
//const slave_ids = Array.from({length: 256}, (_, i) => i );
const metersIdList = [3];

// ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏ö 1 ‡∏£‡∏≠‡∏ö (ms)
const cycleTime = 1000; // 1 ‡∏ß‡∏¥
// ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß (ms)
const intervalPerMeter = cycleTime / metersIdList.length;

let currentIndex = 0;
let connected = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï
const connectPort = async () => {
    try {
        console.log("üîå Trying to connect to port...");
        await client.connectRTUBuffered(port, { baudRate });
        client.setTimeout(500); // ‡∏ï‡∏±‡πâ‡∏á timeout 500ms
        connected = true;
        console.log("‚úÖ Connected to port!");
    } catch (e) {
        connected = false;
        console.log("‚ùå Connection failed, retrying in 2s...", e.message);
        setTimeout(connectPort, 2000); // retry
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
const getMeterValue = async (id) => {
    if (!connected) {
        console.log(`‚ö†Ô∏è  Meter ${id}: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï`);
        return;
    }
    try {
        await client.setID(id);
        const val = await client.readHoldingRegisters(1, 20);
        console.log(`üìà Meter ${id}:`, val.data);

        const oil_h = val.data[3];
        const temp = (val.data[19])/10;

        // ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ API
        await axios.post("http://localhost:8800/fuel_level", {
            timestamp: new Date().toISOString(),
            tank_id: id,
            oil_h: oil_h,
            oil_v: null,
            oil_p: null,
            water_h: null,
            water_v: null,
            water_p: null,
            ullage: null,
            temp: temp,
            status: 1
        });

        console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tank_id=${id} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    } catch (e) {
        console.log(`üö® Meter ${id}: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (${e.message})`);
        if (
            e.message.includes("Port Not Open") ||
            e.message.includes("ECONNRESET")
        ) {
            connected = false;
            console.log("üîÑ Lost connection, will try to reconnect...");
            connectPort(); // trigger reconnect
        }
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß (round-robin)
const scheduleNext = () => {
    const id = metersIdList[currentIndex];
    getMeterValue(id);
    currentIndex = (currentIndex + 1) % metersIdList.length;
    setTimeout(scheduleNext, intervalPerMeter);
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
connectPort(); // initial connect
scheduleNext(); // start polling
